#!/usr/bin/env bash
# """Deactivate the directory environment
#
# SYNOPSIS:
#   deactivate_direnv
#
# DESCRIPTION:
#   THIS SCRIPT CAN ONLY BE USED WHEN DIRECTORY ENVIRONMENT IS LOADED MANUALLY
#
#   For each loaded modules, it will call the corresponding deactivation
#   methods, then it will unset every `DIRENV_*` variables and unset every
#   methods set during the activatation of the directory environment as well as
#   methods used by this script.
#
# """

deactivate_direnv()
{
  # """Deactivate directory environment
  #
  #   For each loaded modules, it will call the corresponding deactivation
  #   methods, then it will unset every `DIRENV_*` variables and unset every
  #   methods set during the activatation of the directory environment as well as
  #   methods used by this script.
  #
  # Globals:
  #   DIRENV_ROOT
  #   DIRENV_LIB_FOLDER
  #   DIRENV_TEMP_FOLDER
  #   DIRENV_MODULE_FOLDER
  #
  # Arguments:
  #   None
  #
  # Output:
  #   Log informations
  #
  # Returns:
  #   None
  #
  # """

  deactivate_modules()
  {
    # """Deactivate already module
    #
    # For each already loaded modules, i.e. modules listed in
    # ${DIRENV_TEMP_FOLDER}/.loaded_modules, call the deactivate method of the
    # module.
    #
    # Globals:
    #   DIRENV_MODULE_FOLDER
    #   DIRENV_TEMP_FOLDER
    #
    # Arguments:
    #   None
    #
    # Output:
    #   Log message to inform the user
    #
    # Returns:
    #   None
    #
    # """

    if [[ -f "${DIRENV_TEMP_FOLDER}/.loaded_modules" ]]
    then
      while read -r i_module
      do
        # shellcheck source=./modules/direnv_management.sh
        source "${DIRENV_MODULE_FOLDER}/${i_module}.sh"
        direnv_log "INFO" "Deactivating module ${i_module}"
        if command -v "deactivate_${i_module}" &> /dev/null
        then
          deactivate_"${i_module}"
        fi
      done <<< "$(cat "${DIRENV_TEMP_FOLDER}/.loaded_modules")"
    fi
  }

  get_methods_list()
  {
    # """Parse file passed as argument to export list of methods
    #
    # Parse a file and return the list of "first-level" methods, i.e. methods
    # which name is not idented. For instance, this metod is not a "first-level"
    # method.
    #
    # Globals:
    #   None
    #
    # Arguments:
    #   $1: string, path to the file to parse
    #
    # Output:
    #   Multiline string with all the "first-level" methods, one per line
    #
    # Returns:
    #   0 if file has "first-level" methods
    #   1 if file does not have "first-level" methods
    #
    # """

    local file_path=$1

    grep -E "^[a-zA-Z0-9_]*\(\)" "${file_path}" | cut -d ":" -f 2
  }


  unset_methods()
  {
    # """Unset methods if defined from list of methods provided as arguments
    #
    # Globals:
    #   None
    #
    # Arguments:
    #   $1: multiline string, list of methods to unset, one method per line
    #
    # Output:
    #   None
    #
    # Returns:
    #   0 if file has "first-level" methods
    #   1 if file does not have "first-level" methods
    #
    # """

    local methods_list=$1
    local i_method

    while read -r i_method
    do
      # Remove parenthesis `()` if present in the method name
      i_method=${i_method//\(\)/}
      if command -v "${i_method}" > /dev/null 2>&1
      then
        unset -f "${i_method}"
      fi
    done <<< "${methods_list}"
  }

  unset_modules()
  {
    # """Unset modules from list of already loaded modules
    #
    # The process to unset modules is compose of two part:
    #   - Unset methods defined in the module
    #   - Unset associative array related to this module
    #
    # Globals:
    #   DIRENV_TEMP_FOLDER
    #   DIRENV_MODULE_FOLDER
    #
    # Arguments:
    #   None
    #
    # Output:
    #   None
    #
    # Returns:
    #   None
    #
    # """

    local i_module
    local file_list

    if [[ -f "${DIRENV_TEMP_FOLDER}/.loaded_modules" ]]
    then
      while read -r i_module
      do
        if [[ "${i_module}" =~ : ]]
        then
          # Extract module name if there is module sub configuration in
          # `.envrc.ini`, like for `openstack` module.
          # Remove everything after the first `:`.
          i_module=${i_module%:*}
        fi
        file_list="${DIRENV_MODULE_FOLDER}/${i_module}.sh"
        unset_methods "$(get_methods_list "${file_list}")"
        # Deallocate module associative array
        unset "${i_module}"
      done <<< "$(cat "${DIRENV_TEMP_FOLDER}/.loaded_modules")"
    fi
  }

  unset_all_methods_and_vars()
  {
    # """Unset all methods and variables set to load directory environment
    #
    # The process to unset all methods and variables is composed of two part:
    #   - Unset methods and variables defined by modules
    #   - Unset methods defined by library scripts
    #
    # Globals:
    #   DIRENV_ROOT
    #   DIRENV_LIB_FOLDER
    #   DIRENV_TEMP_FOLDER
    #   DIRENV_MODULE_FOLDER
    #   DIRENV_CONFIG_PATH
    #   DIRENV_INI_SEP
    #
    # Arguments:
    #   None
    #
    # Output:
    #   None
    #
    # Returns:
    #   None
    #
    # """

    local i_file

    unset_modules
    for i_file in "${DIRENV_LIB_FOLDER}"/*.sh \
                  "${DIRENV_ROOT}/.direnv/activate_direnv"
    do
      unset_methods "$(get_methods_list "${i_file}")"
    done

    unset DIRENV_LIB_FOLDER
    unset DIRENV_TEMP_FOLDER
    unset DIRENV_MODULE_FOLDER
  }

  # Set some needed `DIRENV_*` variable
  export DIRENV_LIB_FOLDER="${DIRENV_ROOT}/.direnv/lib"
  export DIRENV_TEMP_FOLDER="${DIRENV_ROOT}/.direnv/tmp"
  export DIRENV_MODULE_FOLDER="${DIRENV_ROOT}/.direnv/modules"

  # Load library scripts
  for i_lib in "${DIRENV_LIB_FOLDER}"/*.sh
  do
    # shellcheck source=./lib/direnv_log.sh
    source "${i_lib}"
  done

  # Deactivates loaded modules
  deactivate_modules

  # Unset now useless method and variables
  unset_all_methods_and_vars

  # Remove list of loaded modules
  if [[ -f "${DIRENV_TEMP_FOLDER}/.loaded_modules" ]]
  then
    rm -f "${DIRENV_TEMP_FOLDER}/.loaded_modules"
  fi

  # Unset this method
  unset -f deactivate_direnv
}

# ------------------------------------------------------------------------------
# VIM MODELINE
# vim: ft=bash: foldmethod=indent
# ------------------------------------------------------------------------------
